<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://violet404.github.io/</id>
    <title>Violet</title>
    <updated>2021-07-17T10:31:29.434Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://violet404.github.io/"/>
    <link rel="self" href="http://violet404.github.io/atom.xml"/>
    <subtitle>业精于勤，荒于嬉</subtitle>
    <logo>http://violet404.github.io/images/avatar.png</logo>
    <icon>http://violet404.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Violet</rights>
    <entry>
        <title type="html"><![CDATA[JVM 内存与垃圾回收（五）对象的实例化 & 直接内存]]></title>
        <id>http://violet404.github.io/post/5myC2JTLs12/</id>
        <link href="http://violet404.github.io/post/5myC2JTLs12/">
        </link>
        <updated>2021-07-17T14:01:00.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM 内存与垃圾回收（八）垃圾回收]]></title>
        <id>http://violet404.github.io/post/6Qm1ARH3Y/</id>
        <link href="http://violet404.github.io/post/6Qm1ARH3Y/">
        </link>
        <updated>2021-07-17T05:34:26.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM 内存与垃圾回收（七）字符串常量]]></title>
        <id>http://violet404.github.io/post/sfGQyVhCE/</id>
        <link href="http://violet404.github.io/post/sfGQyVhCE/">
        </link>
        <updated>2021-07-17T05:34:02.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM 内存与垃圾回收（六）执行引擎]]></title>
        <id>http://violet404.github.io/post/PwsytJfe7/</id>
        <link href="http://violet404.github.io/post/PwsytJfe7/">
        </link>
        <updated>2021-07-17T05:32:50.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="概述">概述</h1>
<ul>
<li>
<p>执行引擎是Java虚拟机核心的组成部分之一。</p>
</li>
<li>
<p>“虚拟机”是一个相对于“物理机”的概念，这两种机器都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层面上的，而 <strong>虚拟机的执行引擎则是由软件自行实现的</strong> ，因此可以不受物理条件制约地定制指令集与执行引擎的结构体系，<strong>能够执行那些不被硬件直接支持的指令集格式</strong>。</p>
</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<h1 id="概述">概述</h1>
<ul>
<li>
<p>执行引擎是Java虚拟机核心的组成部分之一。</p>
</li>
<li>
<p>“虚拟机”是一个相对于“物理机”的概念，这两种机器都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层面上的，而 <strong>虚拟机的执行引擎则是由软件自行实现的</strong> ，因此可以不受物理条件制约地定制指令集与执行引擎的结构体系，<strong>能够执行那些不被硬件直接支持的指令集格式</strong>。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM 内存与垃圾回收（四）方法区]]></title>
        <id>http://violet404.github.io/post/DI3xGNxed/</id>
        <link href="http://violet404.github.io/post/DI3xGNxed/">
        </link>
        <updated>2021-07-15T10:02:41.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="栈-堆-方法区的交互关系">栈、堆、方法区的交互关系</h2>
<p><em><strong>从线程共享与否的角度看</strong></em> ：</p>
<ul>
<li>ThreadLocal ：如何保证多个线程在并发环境下的安全性？典型应用就是数据库连接管理，以及线程会话管理，独立变量副本</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<h2 id="栈-堆-方法区的交互关系">栈、堆、方法区的交互关系</h2>
<p><em><strong>从线程共享与否的角度看</strong></em> ：</p>
<ul>
<li>ThreadLocal ：如何保证多个线程在并发环境下的安全性？典型应用就是数据库连接管理，以及线程会话管理，独立变量副本</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM 内存与垃圾回收（三）堆]]></title>
        <id>http://violet404.github.io/post/jvm-3/</id>
        <link href="http://violet404.github.io/post/jvm-3/">
        </link>
        <updated>2021-07-14T15:30:46.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="堆区概述">堆区概述</h2>
<ul>
<li>
<p>一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域</p>
</li>
<li>
<p>Java堆区在JVM启动的时候即被创建，其空间大小也就确定了。<em><strong>堆内存的大小是可以调节的。<font color="red">-Xms 初始堆内存大小 -Xmx 最大堆内存大小</font></strong></em></p>
</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<h2 id="堆区概述">堆区概述</h2>
<ul>
<li>
<p>一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域</p>
</li>
<li>
<p>Java堆区在JVM启动的时候即被创建，其空间大小也就确定了。<em><strong>堆内存的大小是可以调节的。<font color="red">-Xms 初始堆内存大小 -Xmx 最大堆内存大小</font></strong></em></p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM 内存与垃圾回收（二）程序计数器&栈]]></title>
        <id>http://violet404.github.io/post/jvm-2/</id>
        <link href="http://violet404.github.io/post/jvm-2/">
        </link>
        <updated>2021-07-13T15:18:21.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="运行时数据区概述及线程">运行时数据区概述及线程</h1>
<p>JVM定义了若干程序运行期间使用的数据区，其中一些随虚拟机的创建而创建，随虚拟机推出而销毁；另外一些则随线程的开始结束而创建与销毁。</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="运行时数据区概述及线程">运行时数据区概述及线程</h1>
<p>JVM定义了若干程序运行期间使用的数据区，其中一些随虚拟机的创建而创建，随虚拟机推出而销毁；另外一些则随线程的开始结束而创建与销毁。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM 内存与垃圾回收（一）类加载]]></title>
        <id>http://violet404.github.io/post/jvm-1/</id>
        <link href="http://violet404.github.io/post/jvm-1/">
        </link>
        <updated>2021-07-05T03:58:27.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="jvm与java体系结构">JVM与Java体系结构</h1>
<h2 id="跨平台性">跨平台性</h2>
<p>Java 是一门跨平台的语言，JVM则跨语言的平台，JSR-292 JVM可以运行非Java语言编写的程序;Java平台的多语言混合编程将成主流方向，使用特定领域的语言解决特定领域的问题</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="jvm与java体系结构">JVM与Java体系结构</h1>
<h2 id="跨平台性">跨平台性</h2>
<p>Java 是一门跨平台的语言，JVM则跨语言的平台，JSR-292 JVM可以运行非Java语言编写的程序;Java平台的多语言混合编程将成主流方向，使用特定领域的语言解决特定领域的问题</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Oracle 游标更新数据]]></title>
        <id>http://violet404.github.io/post/_H2piR_In/</id>
        <link href="http://violet404.github.io/post/_H2piR_In/">
        </link>
        <updated>2021-04-28T09:56:14.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[@JsonFormatter 时间返回不对]]></title>
        <id>http://violet404.github.io/post/jsonformatter-shi-jian-fan-hui-bu-dui/</id>
        <link href="http://violet404.github.io/post/jsonformatter-shi-jian-fan-hui-bu-dui/">
        </link>
        <updated>2021-04-28T06:28:35.000Z</updated>
    </entry>
</feed>